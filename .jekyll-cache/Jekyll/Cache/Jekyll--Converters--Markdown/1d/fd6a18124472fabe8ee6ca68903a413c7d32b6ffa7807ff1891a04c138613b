I"<<h2 id="0-서론">0. 서론</h2>

<p>포스팅은 2020년 3월이나 되어서야 작성하고 있지만 후술할 구현부 부분은 2019년 12월에 구현한 기능들입니다. 현재 해당 기능이 쓰이고 있냐라고 묻는다면 <strong>일부는 쓰이고 일부는 삭제</strong>되었다고 말씀드릴 수 있겠네요.. <em>언리얼 엔진을</em> 다루기 <em>시작한 지</em> 반년도 채 되지 않은 상태였기 때문에 하드코딩 및 <em>직접 구현,</em> 최악의 경우에는 코드 자체가 스파게티인 상황이 연출되기도 <em>했고요.</em></p>

<p>해당 기능들은 논타게팅 액션 게임 내에서 필수적인 공격 기능이므로 무작정 삭제는 할 수는 없었습니다. 약 3달이라는 꽤나 오랜 시간이 지나서야 초반에 구현했던 부족한 부분들을 다듬기 시작했죠. <em>그전까지는</em> 문제점을 인지하고는 있었으나 한 번 손을 대기 시작하면 초반부에 구현했던 부분들을 모두 <em>뜯어고쳐야 하는</em> 상황이 연출되어서 무섭기도 했습니다.</p>

<p>학기 중에 빨리 만들어야 한다는 부담감에 코드 재사용성은 물론이고 하드코딩으로 해놨음에도 불구하고 정확하게 구현을 하지 못해서 꽤나 속을 썩이기도 했죠. 일단 지금은 <em>어느 정도</em> 정리가 된 상태이니 시간이 지난 상황에서 포스팅하니 의외로 뿌듯함이 배가 <em>되는듯합니다.</em></p>

<h2 id="1-콤보공격-초안">1. 콤보공격 초안</h2>

<p><img src="/assets/img/posting/ue4/2_1.gif" alt="2_1" /></p>

<blockquote>
  <p>마우스 오른쪽 버튼을 누르면 재생되는 콤보공격</p>
</blockquote>

<hr />

<p>해당 이미지만 보면 <em>잘 구현이 되어있는듯하지만</em> 마우스를 한 번 클릭할 때 <em><code class="highlighter-rouge">ComboCnt</code>를</em> 1씩 증가시키면서 다음 애니메이션을 호출하도록 한 하드코딩의 산물입니다. <em>ㅋㅋㅋㅋ</em> 그래서 애니메이션이 다 실행되기 전에 마우스를 한 번 더 클릭하게 되면 캐릭터는 다음 애니메이션을 재생하지 <em>못한 채</em> 움직임이 멈추어 버리는 심각한 오류가 있었습니다.</p>

<p>뭐 콤보 공격이기 때문에 때가 <em>될 때</em> 자연스럽게 누르면 즉각적으로 다음 애니메이션으로 넘어간다는 장점은 있었으나 조금만 엇갈리게 클릭하면 (….)</p>

<h2 id="2-콤보공격-초안2">2. 콤보공격 초안2</h2>

<p><img src="/assets/img/posting/ue4/2_2.gif" alt="2_1" /></p>

<p>해당 이미지에서 보이는 기술 역시 위와 같은 문제를 가지고 있었다.</p>

<blockquote>
  <p>마우스 왼쪽 버튼을 누르면 재생되는 콤보공격</p>
</blockquote>

<hr />

<p>사실 위 <em>초안 1보다</em> 더욱 심각하긴 했었다. <em>초안 1 같은</em> 경우에는 애니메이션 자체가 원래 빨라서 약간 연타를 하더라도 정상적으로 진행되었기 때문인데, 해당 <em>공격 같은</em> 경우에는 애니메이션이 빨라졌다 느려졌다 <em>하기 때문에</em> <strong>사용자가 엇박자로 공격을 했어야 했다 (!!!)</strong></p>

<p><em>초안 1은</em> 그래도 <em>어느 정도</em> 구현이 되면서 시연은 할 수 있었던 반면에, <em>초안 2는</em> 시연조차 불가능한 <em>계륵 같은</em> 구현이 되어버렸습니다. 이 사실을 <em>알고 나서</em> 바로 고쳐야 했었는데 이런 문제를 알고 있었음에도 다른 기능들을 계속 <em>붙이다 보니</em> 더욱더 수정이 어려워지는 문제가 초래되기도 했죠.</p>

<h2 id="3-총평">3. 총평</h2>

<p>사실 이런저런 문제가 참 많았던 기능이기도 했고, 제게 많은 교훈을 주기도 했습니다. 처음 구현 프레임을 <em>짤 때는</em> 하드코딩으로 하더라도 최종적으로는 다시 손을 봤어야 했었죠. 문제점을 알고 있음에도 불구하고 깊게 생각하기 싫다고 그대로 손을 <em>놓은 채</em> <em>3달 동안</em> 방치를 해버렸기 때문에 수정 난이도가 사실상 <strong>삭제 후 다시 작성</strong> 뿐이 답이기도 했으니까요.</p>

<p>해당 기능을 수정하고 나서부터는 대부분의 기능들을 완벽하지는 않더라도, 다시 수정이 용이하도록 최대한 생각하면서 코드를 작성하는 습관이 생겼습니다. 최초 구현 단계의 시간은 기존보다 더 <em>오래 걸리지만,</em> 파생 기능을 <em>만드는 데는</em> 훨씬 시간이 <em>단축되었습니다.</em></p>
:ET